using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OFTENCOFTAPI.Models.ViewModels
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var HookResponse = HookResponse.FromJson(jsonString)

        public partial class HookResponse
        {
            [JsonProperty("event")]
            public string Event { get; set; }

            [JsonProperty("data")]
            public Data Data { get; set; }
        }

        public partial class Data
        {
            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("domain")]
            public string Domain { get; set; }

            [JsonProperty("status")]
            public string Status { get; set; }

            [JsonProperty("reference")]
            public string Reference { get; set; }

            [JsonProperty("amount")]
            public long Amount { get; set; }

            [JsonProperty("message")]
            public object Message { get; set; }

            [JsonProperty("gateway_response")]
            public string GatewayResponse { get; set; }

            [JsonProperty("paid_at")]
            public DateTimeOffset DataPaidAt { get; set; }

            [JsonProperty("created_at")]
            public DateTimeOffset CreatedAt { get; set; }

            [JsonProperty("channel")]
            public string Channel { get; set; }

            [JsonProperty("currency")]
            public string Currency { get; set; }

            [JsonProperty("ip_address")]
            public string IpAddress { get; set; }

            [JsonProperty("metadata")]
            public string Metadata { get; set; }

            [JsonProperty("log")]
            public Log Log { get; set; }

            [JsonProperty("fees")]
            public long Fees { get; set; }

            [JsonProperty("fees_split")]
            public object FeesSplit { get; set; }

            [JsonProperty("authorization")]
            public Authorization Authorization { get; set; }

            [JsonProperty("customer")]
            public Customer Customer { get; set; }

            [JsonProperty("plan")]
            public Plan Plan { get; set; }

            [JsonProperty("subaccount")]
            public Plan Subaccount { get; set; }

            [JsonProperty("order_id")]
            public object OrderId { get; set; }

            [JsonProperty("paidAt")]
            public DateTimeOffset PaidAt { get; set; }
        }

        public partial class Authorization
        {
            [JsonProperty("authorization_code")]
            public string AuthorizationCode { get; set; }

            [JsonProperty("bin")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Bin { get; set; }

            [JsonProperty("last4")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Last4 { get; set; }

            [JsonProperty("exp_month")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long ExpMonth { get; set; }

            [JsonProperty("exp_year")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long ExpYear { get; set; }

            [JsonProperty("channel")]
            public string Channel { get; set; }

            [JsonProperty("card_type")]
            public string CardType { get; set; }

            [JsonProperty("bank")]
            public string Bank { get; set; }

            [JsonProperty("country_code")]
            public string CountryCode { get; set; }

            [JsonProperty("brand")]
            public string Brand { get; set; }

            [JsonProperty("reusable")]
            public bool Reusable { get; set; }

            [JsonProperty("signature")]
            public string Signature { get; set; }
        }

        public partial class Customer
        {
            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("first_name")]
            public object FirstName { get; set; }

            [JsonProperty("last_name")]
            public object LastName { get; set; }

            [JsonProperty("email")]
            public string Email { get; set; }

            [JsonProperty("customer_code")]
            public string CustomerCode { get; set; }

            [JsonProperty("phone")]
            public object Phone { get; set; }

            [JsonProperty("metadata")]
            public object Metadata { get; set; }

            [JsonProperty("risk_action")]
            public string RiskAction { get; set; }
        }

        public partial class Log
        {
            [JsonProperty("start_time")]
            public long StartTime { get; set; }

            [JsonProperty("time_spent")]
            public long TimeSpent { get; set; }

            [JsonProperty("attempts")]
            public long Attempts { get; set; }

            [JsonProperty("errors")]
            public long Errors { get; set; }

            [JsonProperty("success")]
            public bool Success { get; set; }

            [JsonProperty("mobile")]
            public bool Mobile { get; set; }

            [JsonProperty("input")]
            public object[] Input { get; set; }

            [JsonProperty("history")]
            public History[] History { get; set; }
        }

        public partial class History
        {
            [JsonProperty("type")]
            public string Type { get; set; }

            [JsonProperty("message")]
            public string Message { get; set; }

            [JsonProperty("time")]
            public long Time { get; set; }
        }

        public partial class Plan
        {
        }

        public partial class HookResponse
        {
            public static HookResponse FromJson(string json) => JsonConvert.DeserializeObject<HookResponse>(json, OFTENCOFTAPI.Models.ViewModels.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this HookResponse self) => JsonConvert.SerializeObject(self, OFTENCOFTAPI.Models.ViewModels.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
}


